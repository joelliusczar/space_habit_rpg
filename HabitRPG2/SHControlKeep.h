//
//  SHControlArray.h
//  HabitRPG2
//
//  Created by Joel Pridgen on 9/12/17.
//  Copyright Â© 2017 Joel Pridgen. All rights reserved.
//

#import <Foundation/Foundation.h>
#import "SHView.h"
#import "VarWrapper.h"

#define takeKey(methodName) [SELPtr sel:@selector(methodName)]
#define takeKey_s(methodName) [SELPtr selName:methodName]

@class SHControlKeep;

@interface ControlExtent: NSObject
@property (strong,nonatomic) id<NSCopying> key;
@property (assign,nonatomic) NSUInteger idx;
@property (strong,nonatomic) id control;
@property (readonly,assign,nonatomic) BOOL isReadOnlyMode;
@end

@interface AssociatedResponderAndSet<T_Responder>: NSObject
@property (strong,nonatomic) T_Responder responder;
@property (strong,nonatomic) NSHashTable *set; //strong references are maintained elsewhere
@end

typedef id (^LazyLoadBlock)(SHControlKeep *,ControlExtent *);
/**
 *ControlDictionary is a private class designed to be used by SHControlKeep
 */
@interface ControlDictionary<T_Control>: NSObject
@property (readonly,assign,nonatomic) NSUInteger count;
@property (weak,nonatomic) SHControlKeep *owner;
-(T_Control)objectForKeyedSubscript:(id)key;
-(void)setObject:(LazyLoadBlock)obj forKeyedSubscript:(id<NSCopying>)key;
-(void)removeObjectForKey:(id)key;
-(instancetype)init:(SHControlKeep *)owner;
@end


@interface ControlList<T_Control>: NSObject
@property (weak,nonatomic) SHControlKeep *owner;
/*number of controls stored in keep*/
@property (readonly,nonatomic) NSUInteger count;
-(T_Control)objectAtIndexedSubscript:(NSUInteger)idx;
-(NSUInteger)indexOfObject:(T_Control)object;
-(void)setObject:(VarWrapper<LazyLoadBlock> *)loaderBlock atIndexedSubscript:(NSUInteger)idx;
-(void)setObject:(LazyLoadBlock)loaderBlock atIndexedSubscript:(NSUInteger)idx andKey:(id<NSCopying>)key;
-(instancetype)init:(SHControlKeep *)owner;
@end


@interface ResponderDictionary<T_Responder>: NSObject
@property (weak,nonatomic) SHControlKeep *owner;
-(void)setObject:(T_Responder)obj forKeyedSubscript:(SELPtr *)key;
-(void)setObject:(T_Responder)obj forKeyedSubscript:(SELPtr *)key secondaryKey:(NSString *)secondaryKey;
-(AssociatedResponderAndSet *)objectForKeyedSubscript:(SELPtr *)key;
-(AssociatedResponderAndSet *)objectForKeyedSubscript:(SELPtr *)key secondaryKey:(NSString *)secondaryKey;
-(instancetype)init:(SHControlKeep *)owner;
@end


/*
SHControlKeep:
using this class I can add a delegate which responds to events generated by controls.
each delegate will be associated with a @selector and then we also associated controls with
that key also.
The purpose for this is that if I need to replace delegate1 with delegate2
all of my controls pointing to delegate1 will now automatically point to delegate2
On the other side of that, controls are added via blocks which accept a SHControlKeep arg
and if a control is added you can use the provided controlKeep to wire up your control to
call the delegate associated with a delegate
the delegate property on your control should have the same and type stored delegate that
you are associating with. 
if name is different, generally nothing will happen but you won't have anything responding 
to your events
if type is different, program will crash when your event triggers but will not until then.

weaknesses: if controlBaseball has a delegate of type baseball and 
controlHockey has a delegate of type Hockey but both of these delegates are named 'delegate'
then these two delegates will not be able to coexist on the same instance of SHControlKeep
solutions: 
A) create 2 instances of SHControlKeep, one that stores controls that send their events to
baseball type delegate and the other that stores controls that send their events to the 
hockey type.
B) supply a secondary key based on which delegate you want responding to your events
C) ideally, you're using the id with protocols pattern for your delegates, so you might 
create a class that implements both and can be used as both typess

definition: subject is the control that has a reference to object
subject does action to object
object/subject is also not used completely consistently,
for example, objectAtIndexedSubscript is dealing with my 'subjects'
*/

@interface SHControlKeep<T_Control,T_Responder> : NSObject
/*number of delegates that controls might be associated with. This count can include nills*/
@property (readonly,nonatomic) NSUInteger associatedCount;
@property (strong,nonatomic) NSMutableDictionary *customProps;
@property (strong,nonatomic) ControlDictionary<T_Control> *controlLookup; //this will only have values specifically defined by client
@property (strong,nonatomic) ControlList<T_Control> *controlList;
@property (strong,nonatomic) ResponderDictionary<T_Responder> *responderLookup;
-(void)addControlToActionSetWithKey:(SELPtr *)key;
-(void)addControlToActionSetWithKey:(SELPtr *)key secondaryKey:(NSString *)secondaryKey;
-(void)addLoaderBlock:(LazyLoadBlock)loaderBlock;
/*if the client sets key through here, it overrides key set on the controlExtent inside the loader block*/
-(void)addLoaderBlock:(LazyLoadBlock)loaderBlock withKey:(id<NSCopying>)key;
@end



